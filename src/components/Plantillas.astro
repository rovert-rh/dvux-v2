---
import Card from "./Card.astro";
import allData from "../Data/Data.json";

const categories = ["Todos", ...new Set(allData.map((item) => item.category))];
const itemsPerPage = 6;
const initialFilter = "Todos";
const initialPage = 1;

const initialFilteredData = allData;
const totalPages = Math.ceil(initialFilteredData.length / itemsPerPage);
const paginatedData = initialFilteredData.slice(0, itemsPerPage);
---

<section class="w-full py-16 sm:py-20">
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 text-center">
    <div
      class="flex flex-col md:flex-row justify-between items-center mb-10 gap-y-6 md:gap-x-8"
    >
      <h2
        class="text-3xl font-bold text-white text-center md:text-left whitespace-nowrap"
      >
        Todas las plantillas
      </h2>
      <div
        id="filter-buttons"
        class="flex flex-wrap gap-2 justify-center md:justify-end"
      >
        {
          categories.map((filter) => (
            <button
              type="button"
              class:list={[
                "py-2 px-5 rounded-lg font-semibold transition-colors duration-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900",
                initialFilter === filter
                  ? "bg-[#41B6A1] text-white"
                  : "bg-[#6E29CC] text-white hover:bg-opacity-80",
              ]}
              data-filter={filter}
            >
              {filter}
            </button>
          ))
        }
      </div>
    </div>

    <div
      id="cards-grid"
      class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 md:gap-8"
    >
      {
        paginatedData.map((template) => (
          // ERROR CORREGIDO: Se eliminó la prop `key`
          <Card
            title={template.title}
            cost={template.cost}
            description={template.description}
            imageUrl={template.imageUrl}
            rating={template.rating}
            previewLink={template.previewLink}
            purchaseLink={template.purchaseLink}
          />
        ))
      }
    </div>

    <div id="pagination-container" class="flex justify-center mt-10 space-x-2">
      {
        Array.from({ length: totalPages }, (_, i) => i + 1).map((page) => (
          <button
            type="button"
            class:list={[
              "py-2 px-4 rounded-lg font-medium transition-colors duration-200 focus:outline-none focus-visible:ring-2 focus-visible:ring-offset-2 focus-visible:ring-offset-gray-900",
              initialPage === page
                ? "bg-[#41B6A1] text-white"
                : "bg-gray-700 text-gray-300 hover:bg-gray-600",
            ]}
            data-page={page}
          >
            {page}
          </button>
        ))
      }
    </div>
  </div>
</section>

<script define:vars={{ allData }}>
  const templates = allData;
  const itemsPerPage = 6;
  let currentPage = 1;
  let activeFilter = "Todos";

  const filterButtonsContainer = document.getElementById("filter-buttons");
  const cardsGrid = document.getElementById("cards-grid");
  const paginationContainer = document.getElementById("pagination-container");

  // La función ya no tiene "data: Template[]"
  function renderCards(data) {
    if (data.length === 0) {
      cardsGrid.innerHTML = `<p class="text-white col-span-full text-lg">No hay plantillas para la categoría "${activeFilter}".</p>`;
      return;
    }
    cardsGrid.innerHTML = data
      .map(
        (template) => `
      <div class="bg-gray-800 rounded-lg overflow-hidden shadow-lg transform hover:-translate-y-1 transition-transform duration-300">
        <a href="${template.previewLink}" target="_blank" rel="noopener noreferrer">
          <img src="${template.imageUrl}" alt="${template.title}" class="w-full h-48 object-cover">
        </a>
        <div class="p-4 text-left">
          <h3 class="text-xl font-bold text-white">${template.title}</h3>
          <p class="text-gray-400 mt-2 h-20 overflow-hidden">${template.description}</p>
          <div class="flex justify-between items-center mt-4">
            <span class="text-lg font-semibold text-[#41B6A1]">$${template.cost}</span>
          </div>
        </div>
      </div>
    `,
      )
      .join("");
  }

  // La función ya no tiene "totalPages: number"
  function renderPagination(totalPages) {
    let buttonsHTML = "";
    for (let i = 1; i <= totalPages; i++) {
      const isActive = i === currentPage;
      buttonsHTML += `
        <button
          type="button"
          class="py-2 px-4 rounded-lg font-medium transition-colors duration-200 ${
            isActive
              ? "bg-[#41B6A1] text-white"
              : "bg-gray-700 text-gray-300 hover:bg-gray-600"
          }"
          data-page="${i}"
        >${i}</button>
      `;
    }
    paginationContainer.innerHTML = buttonsHTML;
  }

  function renderFilterButtons() {
    const buttons = filterButtonsContainer.querySelectorAll("button");
    buttons.forEach((button) => {
      const filter = button.dataset.filter;
      if (filter === activeFilter) {
        button.classList.remove("bg-[#6E29CC]", "hover:bg-opacity-80");
        button.classList.add("bg-[#41B6A1]");
      } else {
        button.classList.remove("bg-[#41B6A1]");
        button.classList.add("bg-[#6E29CC]", "hover:bg-opacity-80");
      }
    });
  }

  function updateView() {
    const filteredData =
      activeFilter === "Todos"
        ? templates
        : templates.filter((item) => item.category === activeFilter);

    const totalPages = Math.ceil(filteredData.length / itemsPerPage);
    currentPage = Math.min(currentPage, totalPages) || 1;

    const startIndex = (currentPage - 1) * itemsPerPage;
    const paginatedData = filteredData.slice(
      startIndex,
      startIndex + itemsPerPage,
    );

    renderCards(paginatedData);
    renderPagination(totalPages);
    renderFilterButtons();
  }

  filterButtonsContainer.addEventListener("click", (e) => {
    // Reemplazo seguro de "as HTMLButtonElement"
    const button = e.target.closest("button");
    if (button) {
      const newFilter = button.dataset.filter;
      if (newFilter !== activeFilter) {
        activeFilter = newFilter;
        currentPage = 1;
        updateView();
      }
    }
  });

  paginationContainer.addEventListener("click", (e) => {
    // Reemplazo seguro de "as HTMLButtonElement"
    const button = e.target.closest("button");
    if (button) {
      const newPage = parseInt(button.dataset.page, 10);
      if (newPage !== currentPage) {
        currentPage = newPage;
        updateView();
      }
    }
  });
</script>
